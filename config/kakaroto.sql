--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 5/5/2021 11:22:56 a. m.
-- Server version: 8.0.19
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE kakaroto;

--
-- Drop table `operacionfabricacion`
--
DROP TABLE IF EXISTS operacionfabricacion;

--
-- Drop table `permisoaplicacion`
--
DROP TABLE IF EXISTS permisoaplicacion;

--
-- Drop table `producto_operacionfabricacion`
--
DROP TABLE IF EXISTS producto_operacionfabricacion;

--
-- Drop table `pruebacalidad`
--
DROP TABLE IF EXISTS pruebacalidad;

--
-- Drop table `rol`
--
DROP TABLE IF EXISTS rol;

--
-- Drop table `terminacion`
--
DROP TABLE IF EXISTS terminacion;

--
-- Drop table `planta`
--
DROP TABLE IF EXISTS planta;

--
-- Drop table `molde`
--
DROP TABLE IF EXISTS molde;

--
-- Drop table `proveedor`
--
DROP TABLE IF EXISTS proveedor;

--
-- Drop table `rubo`
--
DROP TABLE IF EXISTS rubo;

--
-- Drop table `tamiz`
--
DROP TABLE IF EXISTS tamiz;

--
-- Drop table `estandar`
--
DROP TABLE IF EXISTS estandar;

--
-- Drop table `magnitud`
--
DROP TABLE IF EXISTS magnitud;

--
-- Drop table `unidadmedida`
--
DROP TABLE IF EXISTS unidadmedida;

--
-- Drop procedure `registrarEmpleado`
--
DROP PROCEDURE IF EXISTS registrarEmpleado;

--
-- Drop table `correo_tercero`
--
DROP TABLE IF EXISTS correo_tercero;

--
-- Drop table `correo`
--
DROP TABLE IF EXISTS correo;

--
-- Drop table `bom`
--
DROP TABLE IF EXISTS bom;

--
-- Drop table `dimension`
--
DROP TABLE IF EXISTS dimension;

--
-- Drop table `unidadproducto`
--
DROP TABLE IF EXISTS unidadproducto;

--
-- Drop procedure `registroProducto`
--
DROP PROCEDURE IF EXISTS registroProducto;

--
-- Drop table `producto`
--
DROP TABLE IF EXISTS producto;

--
-- Drop table `categoriaproducto`
--
DROP TABLE IF EXISTS categoriaproducto;

--
-- Drop table `subtipoproducto`
--
DROP TABLE IF EXISTS subtipoproducto;

--
-- Drop table `tipoproducto`
--
DROP TABLE IF EXISTS tipoproducto;

--
-- Drop table `bmodetalle`
--
DROP TABLE IF EXISTS bmodetalle;

--
-- Drop table `materiaprima`
--
DROP TABLE IF EXISTS materiaprima;

--
-- Drop table `usuario_aplicacion`
--
DROP TABLE IF EXISTS usuario_aplicacion;

--
-- Drop table `aplicacion_permisos`
--
DROP TABLE IF EXISTS aplicacion_permisos;

--
-- Drop table `permisos`
--
DROP TABLE IF EXISTS permisos;

--
-- Drop table `telefono_tercero`
--
DROP TABLE IF EXISTS telefono_tercero;

--
-- Drop table `telefono`
--
DROP TABLE IF EXISTS telefono;

--
-- Drop table `tipotelefono`
--
DROP TABLE IF EXISTS tipotelefono;

--
-- Drop table `aplicacion`
--
DROP TABLE IF EXISTS aplicacion;

--
-- Drop table `modulo`
--
DROP TABLE IF EXISTS modulo;

--
-- Drop procedure `registrarUsuario`
--
DROP PROCEDURE IF EXISTS registrarUsuario;

--
-- Drop table `usuario`
--
DROP TABLE IF EXISTS usuario;

--
-- Drop table `empleado`
--
DROP TABLE IF EXISTS empleado;

--
-- Drop table `persona`
--
DROP TABLE IF EXISTS persona;

--
-- Drop table `estadocivil`
--
DROP TABLE IF EXISTS estadocivil;

--
-- Drop table `sexo`
--
DROP TABLE IF EXISTS sexo;

--
-- Drop table `tipoidentificacion`
--
DROP TABLE IF EXISTS tipoidentificacion;

--
-- Drop table `puestotrabajo`
--
DROP TABLE IF EXISTS puestotrabajo;

--
-- Drop table `departamento`
--
DROP TABLE IF EXISTS departamento;

--
-- Drop table `direccion_tercero`
--
DROP TABLE IF EXISTS direccion_tercero;

--
-- Drop table `direccion`
--
DROP TABLE IF EXISTS direccion;

--
-- Drop table `pais`
--
DROP TABLE IF EXISTS pais;

--
-- Drop table `ciudad`
--
DROP TABLE IF EXISTS ciudad;

--
-- Drop table `provincia`
--
DROP TABLE IF EXISTS provincia;

--
-- Drop table `coordenada`
--
DROP TABLE IF EXISTS coordenada;

--
-- Drop table `centro_empleado`
--
DROP TABLE IF EXISTS centro_empleado;

--
-- Drop table `centro`
--
DROP TABLE IF EXISTS centro;

--
-- Drop table `cliente`
--
DROP TABLE IF EXISTS cliente;

--
-- Drop table `tercero`
--
DROP TABLE IF EXISTS tercero;

--
-- Drop table `estado`
--
DROP TABLE IF EXISTS estado;

--
-- Drop table `tipoestado`
--
DROP TABLE IF EXISTS tipoestado;

--
-- Set default database
--
USE kakaroto;

--
-- Create table `tipoestado`
--
CREATE TABLE tipoestado (
  idTipoEstado int NOT NULL AUTO_INCREMENT,
  TipoEstado varchar(100) NOT NULL,
  PRIMARY KEY (idTipoEstado)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `estado`
--
CREATE TABLE estado (
  idEstado int NOT NULL AUTO_INCREMENT,
  idTipoEstado int NOT NULL,
  Estado varchar(50) NOT NULL,
  PRIMARY KEY (idEstado)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE estado
ADD CONSTRAINT FK_estado_tipoestado_idTipoEstado FOREIGN KEY (idTipoEstado)
REFERENCES tipoestado (idTipoEstado);

--
-- Create table `tercero`
--
CREATE TABLE tercero (
  idTercero int NOT NULL AUTO_INCREMENT,
  creado_en timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  idEstado int NOT NULL,
  PRIMARY KEY (idTercero)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 780,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE tercero
ADD CONSTRAINT FK_tercero_estado_idEstado FOREIGN KEY (idEstado)
REFERENCES estado (idEstado);

--
-- Create table `cliente`
--
CREATE TABLE cliente (
  idCliente int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  nombre varchar(50) NOT NULL,
  RazonSocial varchar(50) NOT NULL,
  PRIMARY KEY (idCliente)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE cliente
ADD CONSTRAINT FK_cliente_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `centro`
--
CREATE TABLE centro (
  idCentro int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  Centro varchar(100) NOT NULL,
  PRIMARY KEY (idCentro)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE centro
ADD CONSTRAINT FK_centro_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `centro_empleado`
--
CREATE TABLE centro_empleado (
  idCentro int NOT NULL,
  idEmpleado int NOT NULL,
  PRIMARY KEY (idCentro, idEmpleado)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Registro de encargados';

--
-- Create foreign key
--
ALTER TABLE centro_empleado
ADD CONSTRAINT FK_centro_empleado_centro_idCentro FOREIGN KEY (idCentro)
REFERENCES centro (idCentro);

--
-- Create table `coordenada`
--
CREATE TABLE coordenada (
  idCoordenada int NOT NULL AUTO_INCREMENT,
  longitud varchar(100) NOT NULL,
  latitud varchar(100) NOT NULL,
  PRIMARY KEY (idCoordenada)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `provincia`
--
CREATE TABLE provincia (
  idProvincia int NOT NULL AUTO_INCREMENT,
  idCoordenada int NOT NULL,
  Provincia varchar(255) NOT NULL,
  PRIMARY KEY (idProvincia)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE provincia
ADD CONSTRAINT FK_provincia_coordenada_idCoordenada FOREIGN KEY (idCoordenada)
REFERENCES coordenada (idCoordenada);

--
-- Create table `ciudad`
--
CREATE TABLE ciudad (
  idCiudad int NOT NULL AUTO_INCREMENT,
  idProvincia int NOT NULL,
  idCoordenada int NOT NULL,
  Ciudad varchar(100) NOT NULL,
  PRIMARY KEY (idCiudad)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE ciudad
ADD CONSTRAINT FK_ciudad_coordenada_idCoordenada FOREIGN KEY (idCoordenada)
REFERENCES coordenada (idCoordenada);

--
-- Create foreign key
--
ALTER TABLE ciudad
ADD CONSTRAINT FK_ciudad_provincia_idProvincia FOREIGN KEY (idProvincia)
REFERENCES provincia (idProvincia);

--
-- Create table `pais`
--
CREATE TABLE pais (
  idPais int NOT NULL AUTO_INCREMENT,
  idCoordenada int NOT NULL,
  Pais varchar(100) NOT NULL,
  PRIMARY KEY (idPais)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE pais
ADD CONSTRAINT FK_pais_coordenada_idCoordenada FOREIGN KEY (idCoordenada)
REFERENCES coordenada (idCoordenada);

--
-- Create table `direccion`
--
CREATE TABLE direccion (
  idDireccion int NOT NULL AUTO_INCREMENT,
  idPais int NOT NULL,
  idProvincia int NOT NULL,
  idCiudad int NOT NULL,
  idSector varchar(255) NOT NULL,
  PRIMARY KEY (idDireccion, idPais, idCiudad, idProvincia, idSector)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE direccion
ADD CONSTRAINT FK_direccion_ciudad_idCiudad FOREIGN KEY (idCiudad)
REFERENCES ciudad (idCiudad);

--
-- Create foreign key
--
ALTER TABLE direccion
ADD CONSTRAINT FK_direccion_pais_idPais FOREIGN KEY (idPais)
REFERENCES pais (idPais);

--
-- Create table `direccion_tercero`
--
CREATE TABLE direccion_tercero (
  idDireccion int NOT NULL,
  idTercero int NOT NULL,
  idCoordenada int DEFAULT NULL,
  Direccion varchar(255) DEFAULT NULL,
  PRIMARY KEY (idDireccion, idTercero)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE direccion_tercero
ADD CONSTRAINT FK_direccion_tercero_coordenada_idCoordenada FOREIGN KEY (idCoordenada)
REFERENCES coordenada (idCoordenada);

--
-- Create foreign key
--
ALTER TABLE direccion_tercero
ADD CONSTRAINT FK_direccion_tercero_direccion_idDireccion FOREIGN KEY (idDireccion)
REFERENCES direccion (idDireccion);

--
-- Create foreign key
--
ALTER TABLE direccion_tercero
ADD CONSTRAINT FK_direccion_tercero_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `departamento`
--
CREATE TABLE departamento (
  idDepartamento int NOT NULL AUTO_INCREMENT,
  Departamento varchar(50) NOT NULL,
  PRIMARY KEY (idDepartamento)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `puestotrabajo`
--
CREATE TABLE puestotrabajo (
  idPuesto int NOT NULL AUTO_INCREMENT,
  idDepartamento int NOT NULL,
  PuestoTrabajo varchar(255) NOT NULL,
  PRIMARY KEY (idPuesto)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE puestotrabajo
ADD CONSTRAINT FK_puestotrabajo_departamento_idDepartamento FOREIGN KEY (idDepartamento)
REFERENCES departamento (idDepartamento);

--
-- Create table `tipoidentificacion`
--
CREATE TABLE tipoidentificacion (
  idTipoIdentificacion int NOT NULL AUTO_INCREMENT,
  TipoIdentificacion varchar(20) NOT NULL,
  PRIMARY KEY (idTipoIdentificacion)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `sexo`
--
CREATE TABLE sexo (
  idSexo int NOT NULL AUTO_INCREMENT,
  Sexo varchar(15) NOT NULL,
  PRIMARY KEY (idSexo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `estadocivil`
--
CREATE TABLE estadocivil (
  idEstadoCivil int NOT NULL AUTO_INCREMENT,
  idSexo int NOT NULL,
  EstadoCivil varchar(10) NOT NULL,
  PRIMARY KEY (idEstadoCivil)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE estadocivil
ADD CONSTRAINT FK_estadocivil_sexo_idSexo FOREIGN KEY (idSexo)
REFERENCES sexo (idSexo);

--
-- Create table `persona`
--
CREATE TABLE persona (
  idPersona int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  nombre varchar(50) NOT NULL,
  apellido varchar(50) NOT NULL,
  idSexo int NOT NULL,
  idEstadoCivil int NOT NULL,
  idTipoIdentificacion int NOT NULL,
  identificacion varchar(20) NOT NULL,
  fechaNacimiento date DEFAULT NULL,
  PRIMARY KEY (idPersona)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1365,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE persona
ADD CONSTRAINT FK_persona_estadocivil_idEstadoCivil FOREIGN KEY (idEstadoCivil)
REFERENCES estadocivil (idEstadoCivil);

--
-- Create foreign key
--
ALTER TABLE persona
ADD CONSTRAINT FK_persona_sexo_idSexo FOREIGN KEY (idSexo)
REFERENCES sexo (idSexo);

--
-- Create foreign key
--
ALTER TABLE persona
ADD CONSTRAINT FK_persona_tipoidentificacion_idTipoIdentificacion FOREIGN KEY (idTipoIdentificacion)
REFERENCES tipoidentificacion (idTipoIdentificacion);

--
-- Create table `empleado`
--
CREATE TABLE empleado (
  idEmpleado int NOT NULL AUTO_INCREMENT,
  idPersona int NOT NULL,
  idCentro int NOT NULL,
  idDepartamento int NOT NULL,
  idPuesto int NOT NULL,
  foto_url varchar(255) DEFAULT NULL,
  fechaIngreso date DEFAULT NULL,
  PRIMARY KEY (idEmpleado)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE empleado
ADD CONSTRAINT FK_empleados_centro_idCentro FOREIGN KEY (idCentro)
REFERENCES centro (idCentro);

--
-- Create foreign key
--
ALTER TABLE empleado
ADD CONSTRAINT FK_empleados_departamento_idDepartamento FOREIGN KEY (idDepartamento)
REFERENCES departamento (idDepartamento);

--
-- Create foreign key
--
ALTER TABLE empleado
ADD CONSTRAINT FK_empleados_persona_idPersona FOREIGN KEY (idPersona)
REFERENCES persona (idPersona);

--
-- Create foreign key
--
ALTER TABLE empleado
ADD CONSTRAINT FK_empleados_puestotrabajo_idPuesto FOREIGN KEY (idPuesto)
REFERENCES puestotrabajo (idPuesto);

--
-- Create table `usuario`
--
CREATE TABLE usuario (
  idUsuario int NOT NULL AUTO_INCREMENT,
  idEmpleado int NOT NULL,
  usuario varchar(50) NOT NULL,
  clave varchar(255) NOT NULL,
  ultimoAcceso timestamp NULL DEFAULT NULL,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idUsuario)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE usuario
ADD CONSTRAINT FK_usuario_empleado_idEmpleado FOREIGN KEY (idEmpleado)
REFERENCES empleado (idEmpleado);

DELIMITER $$

--
-- Create procedure `registrarUsuario`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registrarUsuario (IN idUsuario int, IN idEmpleado int, IN usuario varchar(50), IN clave int, IN idEstado int)
COMMENT 'Permite registrar y actualizar usuarios'
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;


  IF (idUsuario IS NULL) THEN

    START TRANSACTION;
      IF NOT EXISTS (SELECT
            *
          FROM usuario u
          WHERE u.usuario = usuario) THEN
        START TRANSACTION;

          INSERT INTO usuario (idEmpleado, Usuario, clave)
            VALUES (idEmpleado, usuario, clave);

          SELECT
            u.idUsuario,
            ev.foto_url,
            ev.nombre,
            ev.Departamento,
            ev.PuestoTrabajo,
            'REGISTRO REALIZADO EXITOSAMENTE' AS msg,
            '200' AS status
          FROM usuario u
            LEFT JOIN empleados_v ev
              ON ev.idEmpleado = u.idEmpleado
          WHERE u.usuario = usuario;

        COMMIT;
      ELSE
        START TRANSACTION;
          SELECT
            'El nombre de usuario que intenta crear existe' AS msg,
            '203' AS status;
        COMMIT;
      COMMIT;
    END IF;

  ELSE
  BEGIN

    UPDATE usuario u
    SET u.Usuario = usuario,
        u.clave = clave
    WHERE u.idUsuario = idUsuario;

    SELECT
      *,
      'REGISTRO ACTUALIZADO CORRECTAMENTE' AS msg,
      '200' AS status
    FROM usuario u
    WHERE u.idUsuario = idUsuario;
  END;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `modulo`
--
CREATE TABLE modulo (
  idModulo int NOT NULL AUTO_INCREMENT,
  Modulo varchar(50) NOT NULL,
  url varchar(100) NOT NULL,
  imagen varchar(255) NOT NULL,
  PRIMARY KEY (idModulo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `aplicacion`
--
CREATE TABLE aplicacion (
  idAplicacion int NOT NULL AUTO_INCREMENT,
  idModulo int NOT NULL,
  idPadre int NOT NULL,
  Aplicacion int DEFAULT NULL,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idAplicacion, idModulo, idPadre),
  UNIQUE INDEX UK_aplicacion_idAplicacion (idAplicacion)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE aplicacion
ADD CONSTRAINT FK_aplicacion_modulo_idModulo FOREIGN KEY (idModulo)
REFERENCES modulo (idModulo);

--
-- Create table `tipotelefono`
--
CREATE TABLE tipotelefono (
  idTipoTelefono int NOT NULL AUTO_INCREMENT,
  TipoTelefono varchar(20) NOT NULL,
  PRIMARY KEY (idTipoTelefono)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `telefono`
--
CREATE TABLE telefono (
  idTelefono int NOT NULL AUTO_INCREMENT,
  idTipoTelefono int NOT NULL,
  Telefono varchar(20) NOT NULL,
  PRIMARY KEY (idTelefono)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 564,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE telefono
ADD CONSTRAINT FK_telefono_tipotelefono_idTipoTelefono FOREIGN KEY (idTipoTelefono)
REFERENCES tipotelefono (idTipoTelefono);

--
-- Create table `telefono_tercero`
--
CREATE TABLE telefono_tercero (
  idTelefono int NOT NULL,
  idTercero int NOT NULL,
  PRIMARY KEY (idTercero, idTelefono)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 528,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE telefono_tercero
ADD CONSTRAINT FK_telefono_tercero_telefono_idTelefono FOREIGN KEY (idTelefono)
REFERENCES telefono (idTelefono);

--
-- Create foreign key
--
ALTER TABLE telefono_tercero
ADD CONSTRAINT FK_telefono_tercero_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `permisos`
--
CREATE TABLE permisos (
  idPermiso int NOT NULL AUTO_INCREMENT,
  Descripcion varchar(50) DEFAULT NULL,
  PRIMARY KEY (idPermiso)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `aplicacion_permisos`
--
CREATE TABLE aplicacion_permisos (
  idAplicacion int NOT NULL,
  idPermiso int NOT NULL,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idPermiso, idAplicacion)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE aplicacion_permisos
ADD CONSTRAINT FK_aplicacion_permisos_aplicacion_idAplicacion FOREIGN KEY (idAplicacion)
REFERENCES aplicacion (idAplicacion);

--
-- Create foreign key
--
ALTER TABLE aplicacion_permisos
ADD CONSTRAINT FK_aplicacion_permisos_permisos_idPermiso FOREIGN KEY (idPermiso)
REFERENCES permisos (idPermiso);

--
-- Create table `usuario_aplicacion`
--
CREATE TABLE usuario_aplicacion (
  idUsuario int NOT NULL,
  idAplicacion int NOT NULL,
  idPermiso int NOT NULL,
  PRIMARY KEY (idUsuario, idAplicacion)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE usuario_aplicacion
ADD CONSTRAINT FK_usuario_aplicacion_aplicacion_idAplicacion FOREIGN KEY (idAplicacion)
REFERENCES aplicacion (idAplicacion);

--
-- Create foreign key
--
ALTER TABLE usuario_aplicacion
ADD CONSTRAINT FK_usuario_aplicacion_aplicacion_permisos_idPermiso FOREIGN KEY (idPermiso)
REFERENCES aplicacion_permisos (idPermiso);

--
-- Create foreign key
--
ALTER TABLE usuario_aplicacion
ADD CONSTRAINT FK_usuario_aplicacion_usuario_idUsuario FOREIGN KEY (idUsuario)
REFERENCES usuario (idUsuario);

--
-- Create table `materiaprima`
--
CREATE TABLE materiaprima (
  idMateriaPrima int NOT NULL AUTO_INCREMENT,
  idProducto int NOT NULL,
  PRIMARY KEY (idMateriaPrima)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `bmodetalle`
--
CREATE TABLE bmodetalle (
  idBMO int NOT NULL,
  idMateriaPrima int NOT NULL,
  Cantidad int NOT NULL,
  Unidad varchar(10) NOT NULL,
  PRIMARY KEY (idBMO, idMateriaPrima)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UK_bmodetalle_idBMO` on table `bmodetalle`
--
ALTER TABLE bmodetalle
ADD UNIQUE INDEX UK_bmodetalle_idBMO (idBMO);

--
-- Create foreign key
--
ALTER TABLE bmodetalle
ADD CONSTRAINT FK_bmodetalle_materiaprima_idMateriaPrima FOREIGN KEY (idMateriaPrima)
REFERENCES materiaprima (idMateriaPrima);

--
-- Create table `tipoproducto`
--
CREATE TABLE tipoproducto (
  idTipoProducto int NOT NULL AUTO_INCREMENT,
  TipoProducto varchar(50) NOT NULL,
  PRIMARY KEY (idTipoProducto)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `subtipoproducto`
--
CREATE TABLE subtipoproducto (
  idSubTipoProducto int NOT NULL AUTO_INCREMENT,
  idTipoProducto int NOT NULL,
  SubtipoProducto varchar(50) NOT NULL,
  Descripcion varchar(255) DEFAULT NULL,
  PRIMARY KEY (idSubTipoProducto)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE subtipoproducto
ADD CONSTRAINT FK_subtipoproducto_tipoproducto_idTipoProducto FOREIGN KEY (idTipoProducto)
REFERENCES tipoproducto (idTipoProducto);

--
-- Create table `categoriaproducto`
--
CREATE TABLE categoriaproducto (
  idCategoria int NOT NULL AUTO_INCREMENT,
  Categoria varchar(50) NOT NULL,
  PRIMARY KEY (idCategoria)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `producto`
--
CREATE TABLE producto (
  idProducto int NOT NULL AUTO_INCREMENT,
  idCategoria int NOT NULL,
  idTipo int NOT NULL,
  idSubtipo int NOT NULL,
  Producto varchar(100) NOT NULL,
  descripcion varchar(255) DEFAULT NULL,
  idEstado int NOT NULL DEFAULT 1,
  PRIMARY KEY (idProducto)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Peso por unidad es en libra';

--
-- Create foreign key
--
ALTER TABLE producto
ADD CONSTRAINT FK_producto_categoriaproducto_idCategoria FOREIGN KEY (idCategoria)
REFERENCES categoriaproducto (idCategoria);

--
-- Create foreign key
--
ALTER TABLE producto
ADD CONSTRAINT FK_producto_subtipoproducto_idSubTipoProducto FOREIGN KEY (idSubtipo)
REFERENCES subtipoproducto (idSubTipoProducto);

--
-- Create foreign key
--
ALTER TABLE producto
ADD CONSTRAINT FK_producto_tipoproducto_idTipoProducto FOREIGN KEY (idTipo)
REFERENCES tipoproducto (idTipoProducto);

DELIMITER $$

--
-- Create procedure `registroProducto`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registroProducto (IN idProducto int, IN idCategoria int, IN idTipo int, IN idSubTipo int, IN Producto int, IN Descripcion int, IN idEstado int)
COMMENT 'Permite registrar y actualizar usuarios'
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;


  IF (idProducto IS NULL) THEN

    START TRANSACTION;
      IF NOT EXISTS (SELECT
            *
          FROM producto p
          WHERE p.Producto = Producto) THEN
        START TRANSACTION;

          INSERT INTO producto (idCategoria, idTipo, idSubtipo, Producto, Descripcion, idEstado)
            VALUES (idCategoria, idTipo, idSubTipo, Producto, Descripcion, idEstado);

          SELECT
            u.idUsuario,
            ev.foto_url,
            ev.nombre,
            ev.Departamento,
            ev.PuestoTrabajo,
            'REGISTRO REALIZADO EXITOSAMENTE' AS msg,
            '200' AS status
          FROM producto p
          WHERE p.idProducto = idProducto;

        COMMIT;
      ELSE
        START TRANSACTION;
          SELECT
            'El nombre de producto que intenta registrar existe' AS msg,
            '203' AS status;
        COMMIT;
      COMMIT;
    END IF;

  ELSE
  BEGIN

    UPDATE producto p
    SET p.Usuario = usuario,
        p.clave = clave
    WHERE p.idProducto = idProducto;

    SELECT
      *,
      'REGISTRO ACTUALIZADO CORRECTAMENTE' AS msg,
      '200' AS status
    FROM usuario u
    WHERE u.idUsuario = idUsuario;
  END;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `unidadproducto`
--
CREATE TABLE unidadproducto (
  idProducto int NOT NULL,
  UnidadProducto varchar(100) NOT NULL,
  idEstado int NOT NULL,
  PRIMARY KEY (idProducto)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Lista las unidades en la que esta disponible el producto';

--
-- Create foreign key
--
ALTER TABLE unidadproducto
ADD CONSTRAINT FK_unidadproducto_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create table `dimension`
--
CREATE TABLE dimension (
  idDimension int NOT NULL AUTO_INCREMENT,
  idProducto int NOT NULL,
  largo varchar(255) NOT NULL,
  ancho varchar(255) NOT NULL,
  alto varchar(255) NOT NULL,
  idUnidadMedida int NOT NULL,
  PRIMARY KEY (idDimension)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE dimension
ADD CONSTRAINT FK_dimension_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create table `bom`
--
CREATE TABLE bom (
  idBOM int NOT NULL AUTO_INCREMENT,
  idProduccion int NOT NULL,
  idProducto int NOT NULL,
  idTerminacion int NOT NULL,
  idMedida int NOT NULL,
  creado_en timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  idEstado int NOT NULL,
  PRIMARY KEY (idBOM)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE bom
ADD CONSTRAINT FK_bom_bmodetalle_idBMO FOREIGN KEY (idProducto)
REFERENCES bmodetalle (idBMO);

--
-- Create foreign key
--
ALTER TABLE bom
ADD CONSTRAINT FK_bom_producto_idProducto FOREIGN KEY (idProduccion)
REFERENCES producto (idProducto);

--
-- Create table `correo`
--
CREATE TABLE correo (
  idCorreo int NOT NULL AUTO_INCREMENT,
  Correo varchar(50) NOT NULL,
  PRIMARY KEY (idCorreo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 31,
AVG_ROW_LENGTH = 910,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `correo_tercero`
--
CREATE TABLE correo_tercero (
  idCorreo int NOT NULL,
  idTercero int NOT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 910,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE correo_tercero
ADD CONSTRAINT FK_corre_tercero_correo_idCorreo FOREIGN KEY (idCorreo)
REFERENCES correo (idCorreo);

--
-- Create foreign key
--
ALTER TABLE correo_tercero
ADD CONSTRAINT FK_corre_tercero_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

DELIMITER $$

--
-- Create procedure `registrarEmpleado`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registrarEmpleado (IN idEmpleado int, IN nombre varchar(50), IN apellido varchar(50), IN idSexo int, IN idEstadoCivil int, IN idTipoIdentificacion int, IN Identificacion varchar(20), IN correo varchar(50), IN telefono varchar(50), IN celular varchar(50), IN idCentro int, IN idDepartamento int, IN idPuesto int, IN fechaNacimiento date, IN fechaIngreso date, IN foto_url varchar(255))
COMMENT 'Permite registrar y actualizar empleados'
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;


  IF (idEmpleado IS NULL) THEN

    START TRANSACTION;
      IF NOT EXISTS (SELECT
            *
          FROM empleados_v ev
          WHERE ev.identificacion = Identificacion
          AND ev.idTipoIdentificacion = idTipoIdentificacion) THEN
        START TRANSACTION;

          INSERT INTO tercero (idEstado)
            VALUES (1);
          SET @idTercero = (SELECT
              MAX(t.idTercero) AS IdTercero
            FROM Tercero t);

          INSERT INTO correo (Correo)
            VALUES (correo);
          SET @idCorreo = (SELECT
              MAX(c.idCorreo) AS IdTercero
            FROM correo c);

          INSERT INTO correo_tercero (idCorreo, idTercero)
            VALUES (@idCorreo, @idTercero);

          IF (telefono IS NOT NULL) THEN
            START TRANSACTION;
              INSERT INTO telefono (telefono, idTipoTelefono)
                VALUES (telefono, 1);
              SET @idTelefono = (SELECT
                  MAX(t.idTelefono) AS idTelefono
                FROM telefono t);

              INSERT INTO telefono_tercero (idTelefono, idTercero)
                VALUES (@idTelefono, @idTercero);
            COMMIT;
          END IF;

          IF (celular IS NOT NULL) THEN
            START TRANSACTION;
              INSERT INTO telefono (telefono, idTipoTelefono)
                VALUES (celular, 2);
              SET @idTelefono = (SELECT
                  MAX(t.idTelefono) AS idTelefono
                FROM telefono t);

              INSERT INTO telefono_tercero (idTelefono, idTercero)
                VALUES (@idTelefono, @idTercero);
            COMMIT;
          END IF;

          INSERT INTO persona (idTercero, nombre, apellido, idSexo, idEstadoCivil, idTipoIdentificacion, identificacion, fechaNacimiento)
            VALUES (@idTercero, nombre, apellido, idSexo, idEstadoCivil, idTipoIdentificacion, Identificacion, fechaNacimiento);

          SET @idPersona = (SELECT
              MAX(p.idPersona)
            FROM persona p);

          INSERT INTO empleado (idPersona, idCentro, idDepartamento, idPuesto, fechaIngreso, foto_url)
            VALUES (@idPersona, idCentro, idDepartamento, idPuesto, fechaIngreso, foto_url);

          SET @idEmpleado = (SELECT
              MAX(e.idEmpleado)
            FROM empleado e);

          SELECT
            v.*,
            'Registro realizado con exito' AS msg,
            '200' AS status
          FROM empleados_v v
          WHERE v.idEmpleado = @idEmpleado LIMIT 1;
        COMMIT;

      ELSE
        START TRANSACTION;

          SELECT
            'La persona que intenta registrar exista!!' AS msg,
            '203' AS status;

        COMMIT;
      COMMIT;
    END IF;


  ELSE
  BEGIN

    SET @idPersona = (SELECT
        idPersona
      FROM empleado e
      WHERE e.idEmpleado = idEmpleado);
    SET @idTercero = (SELECT
        p.idTercero
      FROM persona p
      WHERE p.idPersona = @idPersona);

    UPDATE persona p
    SET p.nombre = nombre,
        p.apellido = apellido,
        p.idSexo = idSexo,
        p.idEstadoCivil = idEstadoCivil,
        p.idTipoIdentificacion = idTipoIdentificacion,
        p.identificacion = Identificacion,
        p.fechaNacimiento = fechaNacimiento
    WHERE p.idPersona = @idPersona;

    UPDATE correo c
    SET c.Correo = correo
    WHERE c.idCorreo = (SELECT
        ct.idCorreo
      FROM correo_tercero ct
      WHERE ct.idTercero = @idTercero LIMIT 1);
    UPDATE telefono t
    SET t.Telefono = telefono
    WHERE t.idTipoTelefono = 1
    AND t.idTelefono = (SELECT
        tt.idTelefono
      FROM telefono_tercero tt
      WHERE tt.idTercero = @idTercero LIMIT 1);
    UPDATE telefono t
    SET t.Telefono = celular
    WHERE t.idTipoTelefono = 2
    AND t.idTelefono = (SELECT
        tt.idTelefono
      FROM telefono_tercero tt
      WHERE tt.idTercero = @idTercero LIMIT 1);


    UPDATE empleado e
    SET e.idCentro = idCentro,
        e.idDepartamento = idDepartamento,
        e.idPuesto = idPuesto,
        e.foto_url = foto_url,
        e.fechaIngreso = fechaIngreso
    WHERE e.idEmpleado = idEmpleado;

    SELECT
      *,
      'REGISTRO ACTUALIZADO CORRECTAMENTE' AS msg,
      '200' AS status
    FROM empleados_v ev
    WHERE ev.idEmpleado = idEmpleado LIMIT 1;
  END;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `unidadmedida`
--
CREATE TABLE unidadmedida (
  idUnidadMedida int NOT NULL AUTO_INCREMENT,
  idMagnitud int NOT NULL,
  Medida varchar(50) NOT NULL,
  abrebiatura varchar(5) NOT NULL,
  Equivalente float NOT NULL,
  PRIMARY KEY (idUnidadMedida)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `magnitud`
--
CREATE TABLE magnitud (
  idMagnitud int NOT NULL AUTO_INCREMENT,
  Magnitud varchar(20) NOT NULL,
  PRIMARY KEY (idMagnitud)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `estandar`
--
CREATE TABLE estandar (
  idEstandar int NOT NULL AUTO_INCREMENT,
  Estandar varchar(50) NOT NULL,
  PRIMARY KEY (idEstandar)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `tamiz`
--
CREATE TABLE tamiz (
  idTamiz int NOT NULL AUTO_INCREMENT,
  idUnidadMedida int NOT NULL,
  idEstandar int DEFAULT NULL,
  Tamiz varchar(10) NOT NULL,
  PRIMARY KEY (idTamiz)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE tamiz
ADD CONSTRAINT FK_tamiz_estandar_idEstandar FOREIGN KEY (idEstandar)
REFERENCES estandar (idEstandar);

--
-- Create foreign key
--
ALTER TABLE tamiz
ADD CONSTRAINT FK_tamiz_magnitud_idMagnitud FOREIGN KEY (idUnidadMedida)
REFERENCES magnitud (idMagnitud);

--
-- Create foreign key
--
ALTER TABLE tamiz
ADD CONSTRAINT FK_tamiz_unidadmedida_idUnidadMedida FOREIGN KEY (idUnidadMedida)
REFERENCES unidadmedida (idUnidadMedida);

--
-- Create table `rubo`
--
CREATE TABLE rubo (
  idRubro int NOT NULL AUTO_INCREMENT,
  Rubro varchar(50) NOT NULL,
  PRIMARY KEY (idRubro)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `proveedor`
--
CREATE TABLE proveedor (
  idProveedor int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  idRubro int NOT NULL,
  RazonSocial varchar(100) NOT NULL,
  PRIMARY KEY (idProveedor)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE proveedor
ADD CONSTRAINT FK_proveedor_rubo_idRubro FOREIGN KEY (idRubro)
REFERENCES rubo (idRubro);

--
-- Create foreign key
--
ALTER TABLE proveedor
ADD CONSTRAINT FK_proveedor_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `molde`
--
CREATE TABLE molde (
  idMolde int NOT NULL AUTO_INCREMENT,
  Molde varchar(50) NOT NULL,
  PRIMARY KEY (idMolde)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `planta`
--
CREATE TABLE planta (
  idPlanta int NOT NULL AUTO_INCREMENT,
  idMolde int NOT NULL,
  capacidadMaxima varchar(255) NOT NULL COMMENT 'Kilogramo',
  utilizacionMaxima varchar(255) NOT NULL COMMENT 'Porcentaje',
  VelicidadMaxima varchar(255) NOT NULL COMMENT 'En RPM',
  TiempoOptimoClesclado varchar(255) NOT NULL COMMENT 'En minuto',
  Planta varchar(50) NOT NULL,
  idEstado int NOT NULL,
  PRIMARY KEY (idPlanta)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE planta
ADD CONSTRAINT FK_planta_molde_idMolde FOREIGN KEY (idMolde)
REFERENCES molde (idMolde);

--
-- Create table `terminacion`
--
CREATE TABLE terminacion (
  idTerminacion int NOT NULL,
  Terminacion varchar(50) NOT NULL,
  Descripcion varchar(255) NOT NULL,
  idEstado int NOT NULL DEFAULT 1
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `rol`
--
CREATE TABLE rol (
  idRol int NOT NULL AUTO_INCREMENT,
  Rol varchar(50) NOT NULL,
  PRIMARY KEY (idRol)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `pruebacalidad`
--
CREATE TABLE pruebacalidad (
  idProducto int NOT NULL,
  absorcionHumedad float NOT NULL,
  pesoPorUnidad float NOT NULL,
  descripcion varchar(255) NOT NULL,
  PRIMARY KEY (idProducto)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `producto_operacionfabricacion`
--
CREATE TABLE producto_operacionfabricacion (
  idProducto int NOT NULL,
  idOperacion int NOT NULL,
  PRIMARY KEY (idProducto, idOperacion)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `permisoaplicacion`
--
CREATE TABLE permisoaplicacion (
  idPermisos int NOT NULL,
  Permiso int NOT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `operacionfabricacion`
--
CREATE TABLE operacionfabricacion (
  idOperacionFabricaicon int NOT NULL,
  Operacion varchar(50) NOT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

-- 
-- Dumping data for table tipoestado
--
INSERT INTO tipoestado VALUES
(1, 'usuario');

-- 
-- Dumping data for table estado
--
INSERT INTO estado VALUES
(1, 1, 'activo'),
(2, 1, 'Inactivo');

-- 
-- Dumping data for table departamento
--
INSERT INTO departamento VALUES
(1, 'RECURSOS HUMANOS'),
(2, 'MARKETING'),
(3, 'COMERCIAL'),
(4, 'COMPRAS'),
(5, 'VENTAS'),
(6, 'CONTABILIDAD'),
(7, 'SOPORTE TECNICO'),
(8, 'CONTROL DE GESTIÓN'),
(9, 'TECNOLOGÍA');

-- 
-- Dumping data for table tipoidentificacion
--
INSERT INTO tipoidentificacion VALUES
(1, 'Cedula'),
(2, 'Pasaporte');

-- 
-- Dumping data for table sexo
--
INSERT INTO sexo VALUES
(1, 'Masculino'),
(2, 'Femenino');

-- 
-- Dumping data for table estadocivil
--
INSERT INTO estadocivil VALUES
(1, 1, 'Soltero'),
(2, 1, 'Casado'),
(3, 1, 'Divorciado'),
(4, 1, 'Viudo'),
(5, 2, 'Soltara'),
(6, 2, 'Casada'),
(7, 2, 'Divorciada'),
(8, 2, 'Viuda');

-- 
-- Dumping data for table tercero
--
INSERT INTO tercero VALUES
(1, '2020-10-31 13:58:04', 1),
(6, '2020-10-31 20:25:24', 1),
(7, '2020-10-31 20:27:11', 1),
(8, '2020-10-31 20:27:28', 1),
(9, '2020-10-31 20:28:53', 1),
(10, '2020-10-31 20:32:45', 1),
(11, '2020-10-31 20:34:12', 1),
(12, '2020-10-31 21:14:50', 1),
(13, '2020-10-31 21:57:45', 1),
(14, '2020-10-31 21:58:31', 1),
(15, '2020-10-31 22:06:16', 1),
(16, '2020-11-04 19:13:16', 1),
(17, '2020-11-04 19:14:04', 1),
(18, '2020-11-04 19:14:20', 1),
(19, '2020-11-04 19:23:15', 1),
(20, '2020-11-04 19:25:32', 1),
(21, '2020-11-04 19:27:29', 1),
(22, '2020-11-04 19:28:04', 1),
(23, '2020-11-04 19:28:16', 1),
(24, '2020-11-04 19:28:40', 1),
(25, '2020-11-04 22:46:58', 1),
(26, '2020-11-04 22:48:41', 1),
(27, '2020-11-04 23:52:20', 1),
(28, '2020-11-21 19:53:13', 1),
(29, '2020-11-22 01:37:45', 1),
(30, '2020-11-22 01:37:45', 1),
(31, '2020-11-22 18:45:53', 1),
(32, '2020-11-22 18:46:46', 1),
(33, '2020-11-22 18:48:44', 1),
(34, '2020-11-26 20:12:57', 1),
(35, '2020-11-29 13:17:32', 1);

-- 
-- Dumping data for table coordenada
--
INSERT INTO coordenada VALUES
(1, ' 17° 36'' - 19° 58''', '68° 19'' - 72° 01''');

-- 
-- Dumping data for table puestotrabajo
--
INSERT INTO puestotrabajo VALUES
(1, 1, 'Director contable'),
(2, 1, 'Contable');

-- 
-- Dumping data for table persona
--
INSERT INTO persona VALUES
(1, 0, 'Freilin Jose', 'Jerez Brito', 1, 1, 1, '03105697175', NULL),
(4, 10, 'Freilin Jose', 'Jerez Brito', 1, 1, 1, '03105697171', NULL),
(5, 11, 'Freilin Jose', 'Jerez Brito', 1, 1, 1, '03105697172', NULL),
(6, 12, 'Raul Mendoza', 'ASDFSDFFG', 1, 2, 2, '54684648', '2020-11-01'),
(7, 13, 'Miguel Suarez', 'Peralta Manuel', 1, 2, 1, '03105741564', '0000-00-00'),
(8, 14, 'Miguel Suarez', 'Ramon', 1, 1, 1, '1646846', '2020-11-12'),
(9, 15, 'Raul', 'Peralta Manuel', 1, 1, 1, '2342341234', NULL),
(12, 18, 'Evelin', '0', 2, 5, 1, '23423423', NULL),
(13, 19, 'Evelin', '0', 2, 5, 1, '031156465', '1220-12-12'),
(14, 20, 'Evelin', '0', 2, 5, 1, '03115646555', '1220-12-12'),
(18, 24, 'Evelin', '0', 1, 2, 2, 'fasdf', '2200-12-12'),
(19, 25, 'Daniela', '0', 2, 6, 1, '031564654', '2020-12-12'),
(21, 27, 'Fermin', '0', 1, 1, 1, '03544684684', '1212-12-12'),
(22, 28, 'Raul mejia', 'Grullon', 1, 1, 1, '063-5641684-9', '1212-12-12'),
(23, 29, 'Miguel Raul', 'Lopez', 2, 6, 1, '849-5465468-4', '2020-12-12'),
(24, 31, 'Naruto', 'Pendejo', 1, 1, 1, '064-5687687-6', '1995-12-12'),
(25, 32, 'asdf as', 'asdf', 1, 1, 1, '185-8684648-6', '1995-12-12'),
(26, 33, 'Freilin Jose', 'Jerez Brito', 1, 1, 1, '456-4684684-8', '1995-12-15'),
(27, 34, 'Alver', 'Crack', 1, 1, 1, '56465', '2020-11-01'),
(28, 35, 'Teudy', 'Ramon', 1, 1, 1, '568-4684684-6', '1995-12-12');

-- 
-- Dumping data for table centro
--
INSERT INTO centro VALUES
(1, 1, 'Raiz'),
(2, 1, 'Centro #1'),
(3, 1, 'Centro #2'),
(4, 1, 'Centro #3');

-- 
-- Dumping data for table modulo
--
INSERT INTO modulo VALUES
(1, 'Produccion', '', ''),
(2, 'Desarrollo de Producto', '//desarrolloproducto', 'asdf'),
(3, 'Recursos Humanos', '', ''),
(4, 'Inventario', '', ''),
(5, 'Finanzas', '', ''),
(6, 'Ventas', '', ''),
(7, 'Compras', '', ''),
(8, 'Configuracion', '', '');

-- 
-- Dumping data for table provincia
--
INSERT INTO provincia VALUES
(1, 1, 'Santiago');

-- 
-- Dumping data for table empleado
--
INSERT INTO empleado VALUES
(1, 6, 1, 1, 1, 'views/assets/img/empleados/064-5687687-6/711.jpg', '2020-11-01'),
(2, 7, 1, 1, 1, NULL, '0095-12-12'),
(3, 8, 1, 1, 1, NULL, '2020-11-12'),
(4, 9, 1, 1, 1, NULL, NULL),
(6, 18, 1, 1, 1, NULL, NULL),
(7, 19, 2, 1, 1, NULL, NULL),
(8, 21, 2, 1, 1, NULL, NULL),
(9, 22, 1, 1, 1, 'views/assets/img/empleados/063-5641684-9/418.jpg', '1995-12-12'),
(10, 23, 2, 1, 2, NULL, '1995-12-12'),
(11, 24, 1, 1, 1, 'views/assets/img/empleados/064-5687687-6/711.jpg', '1944-12-12'),
(12, 25, 1, 1, 2, 'views/assets/img/empleados/185-8684648-6/152.jpg', '1995-12-12'),
(13, 26, 3, 1, 1, 'views/assets/img/empleados/064-5687687-6/711.jpg\r\n', '1995-12-12'),
(14, 27, 1, 1, 1, NULL, '2020-11-01'),
(15, 28, 1, 1, 1, NULL, '1995-11-12');

-- 
-- Dumping data for table permisos
--
-- Table kakaroto.permisos does not contain any data (it is empty)

-- 
-- Dumping data for table aplicacion
--
-- Table kakaroto.aplicacion does not contain any data (it is empty)

-- 
-- Dumping data for table tipotelefono
--
INSERT INTO tipotelefono VALUES
(1, 'Telefono'),
(2, 'Celular'),
(3, 'Fax');

-- 
-- Dumping data for table pais
--
INSERT INTO pais VALUES
(1, 1, 'República Dominicana');

-- 
-- Dumping data for table ciudad
--
INSERT INTO ciudad VALUES
(1, 1, 1, 'Santiago de los caballeros');

-- 
-- Dumping data for table tipoproducto
--
INSERT INTO tipoproducto VALUES
(1, 'Block'),
(2, 'Tabla'),
(3, 'Dintel'),
(4, 'Viga'),
(5, 'Bordillo'),
(6, 'Paragoma'),
(7, 'Adoquines'),
(8, 'MateriaPrima');

-- 
-- Dumping data for table subtipoproducto
--
INSERT INTO subtipoproducto VALUES
(1, 1, 'GAFA', 'En ocasiones se utiliza con los huecos de forma horizontal para permitir un poco de visión y dar paso al aire con el exterior.'),
(2, 1, 'MULTICAMARA', 'Los huecos internos de este modelo se encuentran compartimentados. Este tipo de blocks se ocupan habitualmente cuando se quiere construir una pared de una sola hoja.'),
(3, 1, 'CARGA', 'Suelen ser más macizos y se utilizan para muros que tienen funciones estructurales.');

-- 
-- Dumping data for table categoriaproducto
--
INSERT INTO categoriaproducto VALUES
(1, 'Muros de retención'),
(2, 'Muros estructurales'),
(3, 'Bardas perimetrales'),
(4, 'Trafico peatonal'),
(5, 'Estructurales'),
(6, 'No estructurales');

-- 
-- Dumping data for table materiaprima
--
-- Table kakaroto.materiaprima does not contain any data (it is empty)

-- 
-- Dumping data for table usuario
--
INSERT INTO usuario VALUES
(15, 1, 'administrador', '1423', '2020-11-28 00:00:00', 1),
(16, 13, 'freilinjb', '1423', '2020-11-28 00:00:00', 1),
(17, 11, 'naruto', '1423', '2020-11-28 00:00:00', 1);

-- 
-- Dumping data for table aplicacion_permisos
--
-- Table kakaroto.aplicacion_permisos does not contain any data (it is empty)

-- 
-- Dumping data for table telefono
--
INSERT INTO telefono VALUES
(9, 1, '829-526-1234'),
(10, 2, '849-585-1234'),
(11, 1, '849-565-9999'),
(12, 2, '849-585-1234'),
(13, 1, '829-526-1234'),
(14, 2, '849-585-1234'),
(15, 2, '999-999-999'),
(16, 2, '849-585-1234'),
(17, 1, '(809) 526-1234'),
(18, 2, '(849) 555-5555'),
(19, 1, '(809) 526-1234'),
(20, 2, '(849) 555-5555'),
(21, 1, '(809) 526-1234'),
(22, 2, '(849) 555-5555'),
(23, 1, '(809) 526-1234'),
(24, 2, '(849) 555-5555'),
(25, 1, '(809) 526-1234'),
(26, 2, '(849) 555-5555'),
(27, 1, ''),
(28, 2, ''),
(29, 1, '(809) 526-1234'),
(30, 2, '(849) 555-5555'),
(31, 1, '(809) 526-1234'),
(32, 2, '(849) 555-5555'),
(33, 1, '(809) 526-1234'),
(34, 2, '(849) 555-5555'),
(35, 1, '(809) 526-1234'),
(36, 2, '(849) 555-5555'),
(37, 1, '(809) 526-1234'),
(38, 2, '(849) 555-5555'),
(39, 1, '(849) 555-555_'),
(40, 2, '(546) 468-4684'),
(41, 1, '(846) 846-8468'),
(42, 2, '(486) 468-464_'),
(43, 1, '(846) 464-6466'),
(44, 2, '(648) 684-6854'),
(45, 1, '(468) 468-4684'),
(46, 2, '(486) 884-6468'),
(47, 1, '(648) 468-4684'),
(48, 2, '(468) 468-4684'),
(49, 1, '(486) 486-4684'),
(50, 2, '(684) 684-6846'),
(51, 1, '56454'),
(52, 2, '45646'),
(53, 1, '(468) 468-4684'),
(54, 2, '(486) 468-4684');

-- 
-- Dumping data for table unidadmedida
--
-- Table kakaroto.unidadmedida does not contain any data (it is empty)

-- 
-- Dumping data for table magnitud
--
-- Table kakaroto.magnitud does not contain any data (it is empty)

-- 
-- Dumping data for table estandar
--
-- Table kakaroto.estandar does not contain any data (it is empty)

-- 
-- Dumping data for table rubo
--
-- Table kakaroto.rubo does not contain any data (it is empty)

-- 
-- Dumping data for table molde
--
-- Table kakaroto.molde does not contain any data (it is empty)

-- 
-- Dumping data for table direccion
--
-- Table kakaroto.direccion does not contain any data (it is empty)

-- 
-- Dumping data for table correo
--
INSERT INTO correo VALUES
(4, 'freilinjb@gmail.com'),
(5, 'freilinjb@gmail.com'),
(6, 'freilinjb@gmail.com'),
(7, 'freilinjb@gmail.com'),
(8, 'freilinjb@gmail.com'),
(9, 'ftw@gmail.com'),
(10, 'manuelmt@gmail.com'),
(11, 'ft@gmail.com'),
(12, 'manuelmt@gmail.com'),
(13, 'freilinjb@gmail.com'),
(14, 'freilinjb@gmail.com'),
(15, 'freilinjb@gmail.com'),
(16, 'freilinjb@gmail.com'),
(17, 'freilinjb@gmail.com'),
(18, ''),
(19, 'freilinjb@gmail.com'),
(20, 'freilinjb@gmail.com'),
(21, 'freilinjb@gmail.com'),
(22, 'danielafd@gmail.com'),
(23, 'freilinjb@gmail.com'),
(24, 'freilinjb@gmail.com'),
(25, 'juanmt@gmai.com'),
(26, 'juantm@gmail.com'),
(27, 'fasf@gmail.com'),
(28, 'sdf@gmail.com'),
(29, 'dsf@gma.com'),
(30, '5646'),
(31, 'fdsf@gmail.com');

-- 
-- Dumping data for table producto
--
-- Table kakaroto.producto does not contain any data (it is empty)

-- 
-- Dumping data for table bmodetalle
--
-- Table kakaroto.bmodetalle does not contain any data (it is empty)

-- 
-- Dumping data for table usuario_aplicacion
--
-- Table kakaroto.usuario_aplicacion does not contain any data (it is empty)

-- 
-- Dumping data for table unidadproducto
--
-- Table kakaroto.unidadproducto does not contain any data (it is empty)

-- 
-- Dumping data for table terminacion
--
-- Table kakaroto.terminacion does not contain any data (it is empty)

-- 
-- Dumping data for table telefono_tercero
--
INSERT INTO telefono_tercero VALUES
(9, 11),
(10, 11),
(11, 12),
(12, 12),
(13, 13),
(14, 13),
(15, 14),
(16, 15),
(17, 16),
(18, 16),
(19, 17),
(20, 17),
(21, 18),
(22, 18),
(23, 19),
(24, 19),
(25, 20),
(26, 20),
(27, 21),
(28, 21),
(29, 22),
(30, 22),
(31, 23),
(32, 23),
(33, 24),
(34, 24),
(35, 25),
(36, 25),
(37, 26),
(38, 26),
(39, 27),
(40, 27),
(41, 28),
(42, 28),
(43, 29),
(44, 29),
(45, 31),
(46, 31),
(47, 32),
(48, 32),
(49, 33),
(50, 33),
(51, 34),
(52, 34),
(53, 35),
(54, 35);

-- 
-- Dumping data for table tamiz
--
-- Table kakaroto.tamiz does not contain any data (it is empty)

-- 
-- Dumping data for table rol
--
INSERT INTO rol VALUES
(1, 'administrador');

-- 
-- Dumping data for table pruebacalidad
--
-- Table kakaroto.pruebacalidad does not contain any data (it is empty)

-- 
-- Dumping data for table proveedor
--
-- Table kakaroto.proveedor does not contain any data (it is empty)

-- 
-- Dumping data for table producto_operacionfabricacion
--
-- Table kakaroto.producto_operacionfabricacion does not contain any data (it is empty)

-- 
-- Dumping data for table planta
--
-- Table kakaroto.planta does not contain any data (it is empty)

-- 
-- Dumping data for table permisoaplicacion
--
-- Table kakaroto.permisoaplicacion does not contain any data (it is empty)

-- 
-- Dumping data for table operacionfabricacion
--
-- Table kakaroto.operacionfabricacion does not contain any data (it is empty)

-- 
-- Dumping data for table direccion_tercero
--
-- Table kakaroto.direccion_tercero does not contain any data (it is empty)

-- 
-- Dumping data for table dimension
--
-- Table kakaroto.dimension does not contain any data (it is empty)

-- 
-- Dumping data for table correo_tercero
--
INSERT INTO correo_tercero VALUES
(4, 6),
(5, 7),
(6, 8),
(7, 10),
(8, 11),
(9, 12),
(10, 13),
(11, 14),
(12, 15),
(13, 16),
(14, 17),
(15, 18),
(16, 19),
(17, 20),
(18, 21),
(19, 22),
(20, 23),
(21, 24),
(22, 25),
(23, 26),
(24, 27),
(25, 28),
(26, 29),
(27, 31),
(28, 32),
(29, 33),
(30, 34),
(31, 35);

-- 
-- Dumping data for table cliente
--
-- Table kakaroto.cliente does not contain any data (it is empty)

-- 
-- Dumping data for table centro_empleado
--
-- Table kakaroto.centro_empleado does not contain any data (it is empty)

-- 
-- Dumping data for table bom
--
-- Table kakaroto.bom does not contain any data (it is empty)

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;