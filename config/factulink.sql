--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 5/5/2021 11:20:56 a. m.
-- Server version: 8.0.19
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE factulink;

--
-- Drop table `detalle_factura`
--
DROP TABLE IF EXISTS detalle_factura;

--
-- Drop procedure `registrarProducto`
--
DROP PROCEDURE IF EXISTS registrarProducto;

--
-- Drop table `precio_compra`
--
DROP TABLE IF EXISTS precio_compra;

--
-- Drop table `precio_venta`
--
DROP TABLE IF EXISTS precio_venta;

--
-- Drop table `unidad`
--
DROP TABLE IF EXISTS unidad;

--
-- Drop table `detalle_pago`
--
DROP TABLE IF EXISTS detalle_pago;

--
-- Drop table `pago`
--
DROP TABLE IF EXISTS pago;

--
-- Drop procedure `registrarEmpleado`
--
DROP PROCEDURE IF EXISTS registrarEmpleado;

--
-- Drop table `tercero_telefono`
--
DROP TABLE IF EXISTS tercero_telefono;

--
-- Drop procedure `registrarCliente`
--
DROP PROCEDURE IF EXISTS registrarCliente;

--
-- Drop procedure `registrarProveedor`
--
DROP PROCEDURE IF EXISTS registrarProveedor;

--
-- Drop table `telefono`
--
DROP TABLE IF EXISTS telefono;

--
-- Drop table `tercero_correo`
--
DROP TABLE IF EXISTS tercero_correo;

--
-- Drop table `correo`
--
DROP TABLE IF EXISTS correo;

--
-- Drop table `factura`
--
DROP TABLE IF EXISTS factura;

--
-- Drop table `estado`
--
DROP TABLE IF EXISTS estado;

--
-- Drop table `producto_proveedor`
--
DROP TABLE IF EXISTS producto_proveedor;

--
-- Drop table `producto_urlfoto`
--
DROP TABLE IF EXISTS producto_urlfoto;

--
-- Drop table `producto`
--
DROP TABLE IF EXISTS producto;

--
-- Drop table `marca`
--
DROP TABLE IF EXISTS marca;

--
-- Drop table `adquisicion_comprobante`
--
DROP TABLE IF EXISTS adquisicion_comprobante;

--
-- Drop table `cliente`
--
DROP TABLE IF EXISTS cliente;

--
-- Drop table `comprobante`
--
DROP TABLE IF EXISTS comprobante;

--
-- Drop table `empresa`
--
DROP TABLE IF EXISTS empresa;

--
-- Drop table `identificacion`
--
DROP TABLE IF EXISTS identificacion;

--
-- Drop table `proveedor`
--
DROP TABLE IF EXISTS proveedor;

--
-- Drop table `razon_social`
--
DROP TABLE IF EXISTS razon_social;

--
-- Drop table `tercero_direccion`
--
DROP TABLE IF EXISTS tercero_direccion;

--
-- Drop table `tercero`
--
DROP TABLE IF EXISTS tercero;

--
-- Drop table `direccion`
--
DROP TABLE IF EXISTS direccion;

--
-- Drop table `ciudad`
--
DROP TABLE IF EXISTS ciudad;

--
-- Drop table `pais`
--
DROP TABLE IF EXISTS pais;

--
-- Drop table `provincia`
--
DROP TABLE IF EXISTS provincia;

--
-- Drop table `subcategoria`
--
DROP TABLE IF EXISTS subcategoria;

--
-- Drop table `categoria`
--
DROP TABLE IF EXISTS categoria;

--
-- Drop table `usuario`
--
DROP TABLE IF EXISTS usuario;

--
-- Drop table `empleado`
--
DROP TABLE IF EXISTS empleado;

--
-- Drop table `persona`
--
DROP TABLE IF EXISTS persona;

--
-- Drop table `sexo`
--
DROP TABLE IF EXISTS sexo;

--
-- Drop table `tipo`
--
DROP TABLE IF EXISTS tipo;

--
-- Set default database
--
USE factulink;

--
-- Create table `tipo`
--
CREATE TABLE tipo (
  idTipo int NOT NULL AUTO_INCREMENT,
  tipo varchar(50) NOT NULL,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idTipo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `sexo`
--
CREATE TABLE sexo (
  idSexo int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  PRIMARY KEY (idSexo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `persona`
--
CREATE TABLE persona (
  idPersona int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  nombre varchar(50) NOT NULL,
  apellido varchar(50) NOT NULL,
  idSexo int NOT NULL,
  idTipoIdentificacion int NOT NULL COMMENT 'Busca la relacion del tipo con el identificacion del tipo como ''ID''',
  identificacion varchar(20) NOT NULL,
  fechaNacimiento date NOT NULL,
  PRIMARY KEY (idPersona)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE persona
ADD CONSTRAINT FK_persona_sexo_idSexo FOREIGN KEY (idSexo)
REFERENCES sexo (idSexo);

--
-- Create foreign key
--
ALTER TABLE persona
ADD CONSTRAINT FK_persona_tipo_idTipo FOREIGN KEY (idTipoIdentificacion)
REFERENCES tipo (idTipo);

--
-- Create table `empleado`
--
CREATE TABLE empleado (
  idEmpleado int NOT NULL AUTO_INCREMENT,
  idPersona int NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idEmpleado)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE empleado
ADD CONSTRAINT FK_empleado_persona_idPersona FOREIGN KEY (idPersona)
REFERENCES persona (idPersona);

--
-- Create table `usuario`
--
CREATE TABLE usuario (
  idUsuario int NOT NULL AUTO_INCREMENT,
  idEmpleado int NOT NULL,
  usuario varchar(50) NOT NULL,
  clave varchar(255) NOT NULL,
  idTipoUsuario int NOT NULL,
  ultima_actualizacion timestamp NULL DEFAULT '0000-00-00 00:00:00',
  creado_por int NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idUsuario)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE usuario
ADD CONSTRAINT FK_usuario_empleado_idEmpleado FOREIGN KEY (idEmpleado)
REFERENCES empleado (idEmpleado);

--
-- Create foreign key
--
ALTER TABLE usuario
ADD CONSTRAINT FK_usuario_tipo_idTipo FOREIGN KEY (idTipoUsuario)
REFERENCES tipo (idTipo);

--
-- Create table `categoria`
--
CREATE TABLE categoria (
  idCategoria int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idCategoria)
)
ENGINE = INNODB,
AUTO_INCREMENT = 13,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `subcategoria`
--
CREATE TABLE subcategoria (
  idSubCategoria int NOT NULL AUTO_INCREMENT,
  idCategoria int NOT NULL,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idSubCategoria)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 1820,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE subcategoria
ADD CONSTRAINT FK_subcategoria_categoria_idCategoria FOREIGN KEY (idCategoria)
REFERENCES categoria (idCategoria);

--
-- Create table `provincia`
--
CREATE TABLE provincia (
  idProvincia int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idProvincia)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `pais`
--
CREATE TABLE pais (
  idPais int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idPais)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `ciudad`
--
CREATE TABLE ciudad (
  idCiudad int NOT NULL AUTO_INCREMENT,
  idPais int NOT NULL,
  idProvincia int NOT NULL,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idCiudad)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE ciudad
ADD CONSTRAINT FK_ciudad_pais_idPais FOREIGN KEY (idPais)
REFERENCES pais (idPais);

--
-- Create foreign key
--
ALTER TABLE ciudad
ADD CONSTRAINT FK_ciudad_provincia_idProvincia FOREIGN KEY (idProvincia)
REFERENCES provincia (idProvincia);

--
-- Create table `direccion`
--
CREATE TABLE direccion (
  idDireccion int NOT NULL AUTO_INCREMENT,
  idProvincia int NOT NULL,
  idCiudad int NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idDireccion)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE direccion
ADD CONSTRAINT FK_direccion_ciudad_idCiudad FOREIGN KEY (idCiudad)
REFERENCES ciudad (idCiudad);

--
-- Create table `tercero`
--
CREATE TABLE tercero (
  idTercero int NOT NULL AUTO_INCREMENT,
  creado_por int NOT NULL,
  PRIMARY KEY (idTercero)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `tercero_direccion`
--
CREATE TABLE tercero_direccion (
  idTercero int NOT NULL,
  idDireccion int NOT NULL,
  direccion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1'
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tercero_direccion
ADD CONSTRAINT FK_tercero_direccion_direccion_idDireccion FOREIGN KEY (idDireccion)
REFERENCES direccion (idDireccion);

--
-- Create foreign key
--
ALTER TABLE tercero_direccion
ADD CONSTRAINT FK_tercero_direccion_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `razon_social`
--
CREATE TABLE razon_social (
  idTercero int NOT NULL,
  descripcion varchar(100) NOT NULL,
  PRIMARY KEY (idTercero)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE razon_social
ADD CONSTRAINT FK_razon_social_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `proveedor`
--
CREATE TABLE proveedor (
  idProveedor int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  observacion varchar(100) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idProveedor)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE proveedor
ADD CONSTRAINT FK_proveedor_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `identificacion`
--
CREATE TABLE identificacion (
  idTercero int NOT NULL,
  idTipoIdentificacion int NOT NULL,
  descripcion varchar(50) NOT NULL,
  PRIMARY KEY (idTercero, idTipoIdentificacion, descripcion)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE identificacion
ADD CONSTRAINT FK_identificacion_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create foreign key
--
ALTER TABLE identificacion
ADD CONSTRAINT FK_identificacion_tipo_idTipo FOREIGN KEY (idTipoIdentificacion)
REFERENCES tipo (idTipo);

--
-- Create table `empresa`
--
CREATE TABLE empresa (
  idEmpresa int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  itbis float NOT NULL,
  PRIMARY KEY (idEmpresa)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE empresa
ADD CONSTRAINT FK_empresa_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `comprobante`
--
CREATE TABLE comprobante (
  tipoComprobante int NOT NULL,
  encabezado varchar(5) NOT NULL,
  descripcion varchar(50) NOT NULL,
  PRIMARY KEY (tipoComprobante)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `cliente`
--
CREATE TABLE cliente (
  idCliente int NOT NULL AUTO_INCREMENT,
  idTercero int NOT NULL,
  tipoComprobante int NOT NULL,
  idVendedor int NOT NULL,
  diasCredito int NOT NULL DEFAULT 30,
  limiteCredito float NOT NULL DEFAULT 0,
  aplicaDescuento bit(1) NOT NULL DEFAULT b'0',
  descuento float NOT NULL DEFAULT 0,
  observacion varchar(100) DEFAULT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idCliente)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE cliente
ADD CONSTRAINT FK_cliente_comprobante_tipoComprobante FOREIGN KEY (tipoComprobante)
REFERENCES comprobante (tipoComprobante);

--
-- Create foreign key
--
ALTER TABLE cliente
ADD CONSTRAINT FK_cliente_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `adquisicion_comprobante`
--
CREATE TABLE adquisicion_comprobante (
  tipoComprobante int NOT NULL,
  idSucursal int NOT NULL,
  idTipoDocumento int NOT NULL,
  titulo varchar(50) NOT NULL,
  fecha date NOT NULL,
  vencimiento date NOT NULL,
  inicio int NOT NULL,
  final int NOT NULL,
  secuencia int NOT NULL,
  estado bit(1) NOT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE adquisicion_comprobante
ADD CONSTRAINT FK_adquisicion_comprobante_comprobante_tipoComprobante FOREIGN KEY (tipoComprobante)
REFERENCES comprobante (tipoComprobante);

--
-- Create table `marca`
--
CREATE TABLE marca (
  idMarca int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idMarca)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `producto`
--
CREATE TABLE producto (
  idProducto int NOT NULL AUTO_INCREMENT,
  codigo varchar(50) DEFAULT NULL,
  nombre varchar(50) NOT NULL,
  idCategoria int NOT NULL,
  idSubCategoria int NOT NULL,
  idMarca int DEFAULT NULL,
  descripcion varchar(100) NOT NULL,
  stockInicial int NOT NULL,
  stockMinimo int NOT NULL,
  reorden int NOT NULL,
  observacion varchar(100) NOT NULL,
  itbis bit(1) NOT NULL,
  creado_por int NOT NULL,
  creado_en timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idProducto)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE producto
ADD CONSTRAINT FK_producto_categoria_idCategoria FOREIGN KEY (idCategoria)
REFERENCES categoria (idCategoria);

--
-- Create foreign key
--
ALTER TABLE producto
ADD CONSTRAINT FK_producto_marca_idMarca FOREIGN KEY (idMarca)
REFERENCES marca (idMarca);

--
-- Create foreign key
--
ALTER TABLE producto
ADD CONSTRAINT FK_producto_subcategoria_idSubCategoria FOREIGN KEY (idSubCategoria)
REFERENCES subcategoria (idSubCategoria);

--
-- Create table `producto_urlfoto`
--
CREATE TABLE producto_urlfoto (
  idProducto int NOT NULL,
  urlFoto varchar(255) NOT NULL,
  PRIMARY KEY (idProducto, urlFoto)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE producto_urlfoto
ADD CONSTRAINT FK_producto_urlfoto_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create table `producto_proveedor`
--
CREATE TABLE producto_proveedor (
  idProducto int NOT NULL,
  idProveedor int NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idProducto, idProveedor)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE producto_proveedor
ADD CONSTRAINT FK_producto_proveedor_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create foreign key
--
ALTER TABLE producto_proveedor
ADD CONSTRAINT FK_producto_proveedor_proveedor_idProveedor FOREIGN KEY (idProveedor)
REFERENCES proveedor (idProveedor);

--
-- Create table `estado`
--
CREATE TABLE estado (
  idEstado int NOT NULL AUTO_INCREMENT,
  tipo varchar(20) NOT NULL,
  descripcion varchar(50) NOT NULL,
  PRIMARY KEY (idEstado)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Almacena los distintos estados de las tablas que tenga un idEstado con su Tipo';

--
-- Create table `factura`
--
CREATE TABLE factura (
  numFactura int NOT NULL AUTO_INCREMENT,
  idUsuario int NOT NULL,
  idCliente int NOT NULL,
  idTipoFactura int NOT NULL,
  NFC varchar(20) NOT NULL,
  fecha timestamp NOT NULL,
  subTotal varchar(255) NOT NULL,
  total varchar(255) NOT NULL,
  descuento varchar(255) NOT NULL,
  idEstado int NOT NULL DEFAULT 1,
  PRIMARY KEY (numFactura, idUsuario, idCliente),
  UNIQUE INDEX UK_factura_numFactura (numFactura)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE factura
ADD CONSTRAINT FK_factura_cliente_idCliente FOREIGN KEY (idCliente)
REFERENCES cliente (idCliente);

--
-- Create foreign key
--
ALTER TABLE factura
ADD CONSTRAINT FK_factura_estado_idEstado FOREIGN KEY (idEstado)
REFERENCES estado (idEstado);

--
-- Create foreign key
--
ALTER TABLE factura
ADD CONSTRAINT FK_factura_usuario_idUsuario FOREIGN KEY (idUsuario)
REFERENCES usuario (idUsuario);

--
-- Create table `correo`
--
CREATE TABLE correo (
  idCorreo int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  PRIMARY KEY (idCorreo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `tercero_correo`
--
CREATE TABLE tercero_correo (
  idTercero int NOT NULL,
  idCorreo int NOT NULL,
  PRIMARY KEY (idCorreo, idTercero)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tercero_correo
ADD CONSTRAINT FK_tercero_correo_correo_idCorreo FOREIGN KEY (idCorreo)
REFERENCES correo (idCorreo);

--
-- Create foreign key
--
ALTER TABLE tercero_correo
ADD CONSTRAINT FK_tercero_correo_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

--
-- Create table `telefono`
--
CREATE TABLE telefono (
  idTelefono int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  PRIMARY KEY (idTelefono)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `registrarProveedor`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registrarProveedor (IN nombre varchar(50), IN razonSocial varchar(50), IN RNC varchar(20), IN idComercio int, IN correo varchar(50), IN telefono varchar(20), IN idProvincia int, IN idCiudad int, IN direccion varchar(100), IN Observacion varchar(100), IN creado_por int, IN estado bit)
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  SET @alerta = FALSE;
  SET @mensaje = '';
  -- SET @idTercero = (SELECT i.idTercero AS identificacion FROM identificacion i WHERE i.descripcion = RNC);

  IF NOT EXISTS (SELECT
        i.idTercero AS identificacion
      FROM identificacion i
      WHERE i.descripcion = RNC) THEN
    START TRANSACTION;
      INSERT INTO tercero (creado_por)
        VALUES (creado_por);
      SET @idTercero = (SELECT
          MAX(t.idTercero) AS MAX
        FROM tercero t);

      INSERT INTO correo (descripcion)
        VALUES (LOWER(correo));
      SET @idCorreo = (SELECT
          MAX(c.idCorreo) AS MAX
        FROM correo c);

      INSERT INTO telefono (descripcion)
        VALUES (LOWER(telefono));
      SET @idTelefono = (SELECT
          MAX(t.idTelefono) AS MAX
        FROM telefono t);

      INSERT INTO direccion (idProvincia, idCiudad)
        VALUES (idProvincia, idCiudad);
      SET @idDireccion = (SELECT
          MAX(d.IdDireccion) AS MAX
        FROM direccion d);

      INSERT INTO tercero_direccion (idTercero, idDireccion, direccion)
        VALUES (@idTercero, @idDireccion, direccion);

      INSERT INTO proveedor (idTercero, observacion, estado)
        VALUES (@idTercero, Observacion, estado);
      SET @idProveedor = (SELECT
          MAX(p.idProveedor) AS MAX
        FROM proveedor p);

      SELECT
        *
      FROM proveedor p
      WHERE p.idProveedor = @idProveedor;
    COMMIT;

  ELSE
  BEGIN
    SELECT
      '1' AS error,
      'El proveedor que intenta registrar existe' AS mensaje;
  END;
  END IF;


-- COMMIT;

END
$$

--
-- Create procedure `registrarCliente`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registrarCliente (IN nombre varchar(50), IN idTipoIdentificacion int, IN identificacion varchar(20), IN idTipoComprobante int, IN idVendedor int, IN correo varchar(50), IN telefono varchar(50), IN diasCredito varchar(255), IN limiteCredito varchar(255), IN aplicaDescuento bit, IN descuento float, IN idProvincia int, IN idCiudad int, IN direccion varchar(100), IN observacion varchar(255), IN creado_por int, IN estado bit)
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  SET @idTercero = (SELECT
      i.descripcion AS identificacion
    FROM identificacion i
    WHERE i.descripcion = identificacion);
  IF (@idTercero IS NULL) THEN
    START TRANSACTION;
      INSERT INTO tercero (creado_por)
        VALUES (creado_por);
      SET @idTercero = (SELECT
          MAX(t.idTercero) AS MAX
        FROM tercero t);

      INSERT INTO telefono (descripcion)
        VALUES (telefono);
      SET @idTelefono = (SELECT
          MAX(t.idTelefno) AS MAX
        FROM telefono t);

      INSERT INTO correo (descripcion)
        VALUES (correo);
      SET @idCorreo = (SELECT
          MAX(c.descripcion) AS MAX
        FROM correo c);

      INSERT INTO identificacion (idTercero, idTipoIdentificacion, descripcion)
        VALUES (@idTercero, idTipoIdentificacion, identificacion);

      INSERT INTO cliente (idTercero, idTipoComprobante, idVendedor, diasCredito, limiteCredito, aplicaDescuento, descuento, observacion, estado)
        VALUES (@idTercero, idTipoComprobante.idVendedor, diasCredito, limiteCredito, aplicaDescuento, descuento, observacion, estado);
    COMMIT;

  ELSE
  BEGIN
    SELECT
      *
    FROM persona p
    WHERE p.idTercero = @idTercero;
  END;

  END IF;


END
$$

DELIMITER ;

--
-- Create table `tercero_telefono`
--
CREATE TABLE tercero_telefono (
  idTercero int NOT NULL,
  idTelefono int NOT NULL,
  PRIMARY KEY (idTercero, idTelefono)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tercero_telefono
ADD CONSTRAINT FK_tercero_telefono_telefono_idTelefono FOREIGN KEY (idTelefono)
REFERENCES telefono (idTelefono);

--
-- Create foreign key
--
ALTER TABLE tercero_telefono
ADD CONSTRAINT FK_tercero_telefono_tercero_idTercero FOREIGN KEY (idTercero)
REFERENCES tercero (idTercero);

DELIMITER $$

--
-- Create procedure `registrarEmpleado`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registrarEmpleado (IN nombre varchar(50), IN apellido varchar(50), IN idSexo int, IN idTipoIdentificacion int, IN identificacion varchar(20), IN fechaNacimiento date, IN correo varchar(50), IN telefono char(20), IN usuario varchar(255), IN clave varchar(255), IN idProvincia int, IN idCiudad int, IN direccion varchar(100), IN idTipoUsuario int, IN creado_por int)
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  --   DECLARE EXIT HANDLER FOR SQLWARNING
  --   BEGIN
  --     GET DIAGNOSTICS CONDITION 1
  --     @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  --     SELECT
  --       @p1 AS RETURNED_SQLSTATE,
  --       @p2 AS MESSAGE_TEXT;
  --     ROLLBACK;
  --   END;

  SET @alerta = FALSE;
  SET @mensaje = '';
  IF EXISTS (SELECT
        u.idUsuario
      FROM usuario u
      WHERE u.usuario = usuario) THEN
    SET @alerta = TRUE;
    SET @mensaje = 'El usuario que intenta registrar existe';
  END IF;

  IF EXISTS (SELECT
        p.identificacion
      FROM persona p
      WHERE p.identificacion = identificacion
      AND p.idTipoIdentificacion = idTipoIdentificacion) THEN
    SET @alerta = TRUE;
    SET @mensaje = 'El usuario que intenta registrar existe';
  END IF;

  IF (@alerta IS FALSE) THEN
    START TRANSACTION;
      INSERT INTO tercero (creado_por)
        VALUES (creado_por);
      SET @idTercero = (SELECT
          MAX(t.idTercero) AS MAX
        FROM tercero t);

      INSERT INTO persona (idTercero, nombre, apellido, idSexo, idTipoIdentificacion, identificacion, fechaNacimiento)
        VALUES (@idTercero, nombre, apellido, idSexo, idTipoIdentificacion, identificacion, fechaNacimiento);

      SET @idPersona = (SELECT
          MAX(p.idPersona) AS MAX
        FROM persona p);
      INSERT INTO empleado (idPersona)
        VALUES (@idPersona);
      SET @idEmpleado = (SELECT
          MAX(e.idEmpleado) AS MAX
        FROM empleado e);

      INSERT INTO usuario (idEmpleado, usuario, clave, idTipoUsuario, creado_por)
        VALUES (@idEmpleado, usuario, clave, idTipoUsuario, creado_por);

      IF (telefono IS NOT NULL) THEN
        --  START TRANSACTION;
        INSERT INTO telefono (descripcion)
          VALUES (telefono);
        SET @idTelefono = (SELECT
            MAX(t.idTelefono) AS MAX
          FROM telefono t);

        INSERT INTO tercero_telefono (idTercero, idTelefono)
          VALUES (@idTercero, @idTelefono);
      --  COMMIT;
      END IF;

      IF (correo IS NOT NULL) THEN
        --  START TRANSACTION;
        INSERT INTO correo (descripcion)
          VALUES (correo);
        SET @idCorreo = (SELECT
            MAX(c.idCorreo) AS MAX
          FROM correo c);
        INSERT INTO tercero_correo (idTercero, idCorreo)
          VALUES (@idTercero, @idCorreo);
        --  COMMIT;



        INSERT INTO direccion (idProvincia, idCiudad, estado)
          VALUES (idProvincia, idCiudad, estado);
        SET @idDireccion = (SELECT
            MAX(d.idDireccion) AS MAX
          FROM direccion d);
        INSERT INTO tercero_direccion (idTercero, idDireccion, direccion)
          VALUES (@idTercero, @idDireccion, direccion);

        SELECT
          e.*,
          @alerta AS error,
          @mensaje AS msg
        FROM empleado e
        WHERE e.idEmpleado = @idEmpleado;
      -- INSERT INTO 

      COMMIT;
    END IF;

  ELSE
  BEGIN
    SELECT
      @alerta AS error,
      @mensaje AS msg;
  END;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `pago`
--
CREATE TABLE pago (
  idPago int NOT NULL AUTO_INCREMENT,
  idUsuario int NOT NULL COMMENT 'Almacena la informacion del usuario que lo registro',
  idCliente int NOT NULL COMMENT 'Almacena el identificador del cliente',
  reciboManual varchar(10) DEFAULT NULL COMMENT 'Se digita el numero de recibo del talonario, si se realizo de forma manual',
  fechaRecibo date NOT NULL,
  monto float NOT NULL,
  idFormaPago int NOT NULL,
  idBanco int DEFAULT NULL,
  idTipoMoneda int DEFAULT NULL,
  creado_en timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  observacion varchar(250) NOT NULL,
  PRIMARY KEY (idPago)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `detalle_pago`
--
CREATE TABLE detalle_pago (
  idPago int NOT NULL,
  numFactura int NOT NULL,
  saldo float NOT NULL,
  montoAplicado float NOT NULL,
  pendiente float NOT NULL,
  tasa float NOT NULL,
  estado bit(1) NOT NULL,
  PRIMARY KEY (idPago, numFactura)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE detalle_pago
ADD CONSTRAINT FK_detalle_pago_factura_numFactura FOREIGN KEY (numFactura)
REFERENCES factura (numFactura);

--
-- Create foreign key
--
ALTER TABLE detalle_pago
ADD CONSTRAINT FK_detalle_pago_pago_idPago FOREIGN KEY (idPago)
REFERENCES pago (idPago);

--
-- Create table `unidad`
--
CREATE TABLE unidad (
  idUnidad int NOT NULL AUTO_INCREMENT,
  descripcion varchar(50) NOT NULL,
  creado_por int NOT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idUnidad)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `precio_venta`
--
CREATE TABLE precio_venta (
  idProducto int NOT NULL,
  idUnidad int NOT NULL,
  fecha timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  precio float NOT NULL,
  actualizado_por int DEFAULT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (fecha, idUnidad, idProducto, precio)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE precio_venta
ADD CONSTRAINT FK_precio_venta_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create foreign key
--
ALTER TABLE precio_venta
ADD CONSTRAINT FK_precio_venta_unidad_idUnidad FOREIGN KEY (idUnidad)
REFERENCES unidad (idUnidad);

--
-- Create table `precio_compra`
--
CREATE TABLE precio_compra (
  idProducto int NOT NULL,
  idUnidad int NOT NULL,
  fecha timestamp NOT NULL,
  precio float NOT NULL,
  actualizado_por int DEFAULT NULL,
  estado bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (idProducto, idUnidad, fecha)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE precio_compra
ADD CONSTRAINT FK_precio_compra_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create foreign key
--
ALTER TABLE precio_compra
ADD CONSTRAINT FK_precio_compra_unidad_idUnidad FOREIGN KEY (idUnidad)
REFERENCES unidad (idUnidad);

DELIMITER $$

--
-- Create procedure `registrarProducto`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE registrarProducto (IN idProducto int, IN codigo varchar(50), IN nombre varchar(50), IN idCategoria int, IN idSubCategoria int, IN idMarca int, IN idUnidad varchar(255), IN descripcion varchar(100), IN stockInicial int, IN stockMinimo int, IN reorden int, IN observacion varchar(100), IN itbis bit, IN PrecioVenta float, IN PrecioCompra float, IN idProveedor int, IN creado_por int, IN estado bit)
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
    @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
    SELECT
      @p1 AS RETURNED_SQLSTATE,
      @p2 AS MESSAGE_TEXT;
    ROLLBACK;
  END;

  SET @alerta = FALSE;
  SET @mensaje = '';

  IF EXISTS (SELECT
        p.codigo
      FROM producto p
      WHERE p.codigo <> NULL
      AND p.codigo = codigo) THEN
    SET @alerta = TRUE;
    SET @mensaje = 'El codigo que intenta registrar existe';
  END IF;

  IF (@alerta IS FALSE
    AND idProducto IS NULL) THEN
    START TRANSACTION;
      SET @fechaTiempo = CURRENT_TIMESTAMP();
      INSERT INTO producto (codigo, nombre, idCategoria, idSubCategoria, idMarca, descripcion, stockInicial, stockMinimo, reorden, observacion, itbis, creado_por, estado)
        VALUES (codigo, nombre, idCategoria, idSubCategoria, idMarca, descripcion, stockInicial, stockMinimo, reorden, observacion, itbis, creado_por, estado);

      SET @idProducto = (SELECT
          MAX(p.idProducto)
        FROM producto p);
      IF (idProveedor IS NOT NULL) THEN
        INSERT INTO producto_proveedor (idProducto, idProveedor)
          VALUES (@idProducto, idProveedor);
      END IF;

      INSERT INTO precio_compra (idProducto, idUnidad, fecha, precio)
        VALUES (@idProducto, idUnidad, @fechaTiempo, PrecioCompra);
      INSERT INTO precio_venta (idProducto, idUnidad, fecha, precio)
        VALUES (@idProducto, idUnidad, @fechaTiempo, PrecioVenta);

      SELECT
        *
      FROM producto p
      WHERE p.idProducto = @idProducto;
    COMMIT;

  ELSEIF (idProveedor IS NOT NULL) THEN
  BEGIN
    UPDATE producto p
    SET codigo = codigo,
        p.nombre = nombre,
        p.idCategoria = idCategoria,
        p.idSubCategoria = idSubCategoria,
        p.idMarca = idMarca,
        p.descripcion = descripcion,
        p.stockInicial = stockInicial,
        p.stockMinimo = stockMinimo,
        p.reorden = reorden,
        p.observacion = observacion,
        p.itbis = itbis,
        p.estado = estado
    WHERE p.idProducto = idProducto;

    SELECT
      *
    FROM producto p
    WHERE p.idProducto = idProducto;
  END;

  ELSE
  BEGIN
    SELECT
      @alerta AS error,
      @mensaje AS msg;
  END;

  END IF;
END
$$

DELIMITER ;

--
-- Create table `detalle_factura`
--
CREATE TABLE detalle_factura (
  numFactura int NOT NULL,
  idProducto int NOT NULL,
  idUnidad int NOT NULL,
  cantidad float NOT NULL,
  precio float NOT NULL,
  itbis float NOT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE detalle_factura
ADD CONSTRAINT FK_detalle_factura_factura_numFactura FOREIGN KEY (numFactura)
REFERENCES factura (numFactura);

--
-- Create foreign key
--
ALTER TABLE detalle_factura
ADD CONSTRAINT FK_detalle_factura_producto_idProducto FOREIGN KEY (idProducto)
REFERENCES producto (idProducto);

--
-- Create foreign key
--
ALTER TABLE detalle_factura
ADD CONSTRAINT FK_detalle_factura_unidad_idUnidad FOREIGN KEY (idUnidad)
REFERENCES unidad (idUnidad);

-- 
-- Dumping data for table tipo
--
INSERT INTO tipo VALUES
(1, 'usuario', 'administrador', True),
(2, 'usuario', 'caja', True),
(3, 'usuario', 'gerencia', True),
(4, 'identificacion', 'Cedula', True),
(5, 'identificacion', 'Pasaporte', True);

-- 
-- Dumping data for table sexo
--
INSERT INTO sexo VALUES
(1, 'Hombre'),
(2, 'Mujer'),
(3, 'No definido');

-- 
-- Dumping data for table persona
--
INSERT INTO persona VALUES
(3, 5, 'Freilin Jose', 'Jerez Brito', 1, 5, '031-056-5465', '1995-03-09'),
(4, 6, 'Freilin Jose', 'Jerez Brito', 1, 5, '031-056-222', '1995-03-09');

-- 
-- Dumping data for table provincia
--
INSERT INTO provincia VALUES
(1, 'Santiago', True);

-- 
-- Dumping data for table pais
--
INSERT INTO pais VALUES
(1, 'Republica Dominicana', True);

-- 
-- Dumping data for table categoria
--
INSERT INTO categoria VALUES
(1, 'Alimentos', True),
(2, 'Electrodomésticos', True),
(3, 'Medicamentos', True),
(4, 'Tocador e Higiene personal', True),
(5, 'Productos para animales', True),
(6, 'Productos para niños', True),
(7, 'Servicios', True),
(8, 'Productos de Limpieza', True);

-- 
-- Dumping data for table empleado
--
INSERT INTO empleado VALUES
(3, 3, True),
(4, 4, True);

-- 
-- Dumping data for table comprobante
--
-- Table factulink.comprobante does not contain any data (it is empty)

-- 
-- Dumping data for table ciudad
--
INSERT INTO ciudad VALUES
(1, 1, 1, 'Santiago de los Caballeros', True);

-- 
-- Dumping data for table tercero
--
INSERT INTO tercero VALUES
(5, 1),
(6, 1),
(10, 1),
(11, 1);

-- 
-- Dumping data for table subcategoria
--
INSERT INTO subcategoria VALUES
(1, 1, 'Aceite', True),
(2, 1, 'Margarina', True),
(3, 1, 'Bebidas alcohólicas', True),
(4, 1, 'Carnes', True),
(5, 1, 'Comidas congeladas', True),
(6, 1, 'Comidas rapidas', True),
(7, 1, 'Huevo', True),
(8, 1, 'Productos lácteos', True),
(9, 1, 'Salsas', True),
(10, 1, 'Sopas', True),
(11, 1, 'Bebidas no alcohólicas', True);

-- 
-- Dumping data for table marca
--
-- Table factulink.marca does not contain any data (it is empty)

-- 
-- Dumping data for table usuario
--
INSERT INTO usuario VALUES
(3, 3, 'freilinjb', '$2b$10$4vZzXEEltfLMBeBUpK14cerP4.zIeIztE4UjjVweySpScFUmnt3gG', 1, '0000-00-00 00:00:00', 1, True),
(4, 4, 'freilinjb21', '1423', 1, '0000-00-00 00:00:00', 1, True);

-- 
-- Dumping data for table estado
--
-- Table factulink.estado does not contain any data (it is empty)

-- 
-- Dumping data for table cliente
--
-- Table factulink.cliente does not contain any data (it is empty)

-- 
-- Dumping data for table telefono
--
INSERT INTO telefono VALUES
(3, '849-565-5255'),
(4, '849-565-5255'),
(6, '849-565-444'),
(7, '849-565-444');

-- 
-- Dumping data for table direccion
--
INSERT INTO direccion VALUES
(3, 1, 1, True),
(4, 1, 1, True),
(6, 1, 1, True),
(7, 1, 1, True);

-- 
-- Dumping data for table correo
--
INSERT INTO correo VALUES
(3, 'freilinjb@gmail.com'),
(4, 'freilinjb@gmail.com'),
(7, 'ecocisa@soporte.com'),
(8, 'ecocisa@soporte.com');

-- 
-- Dumping data for table proveedor
--
INSERT INTO proveedor VALUES
(1, 10, 'asd fasdf', True),
(2, 11, 'asd fasdf', True);

-- 
-- Dumping data for table pago
--
-- Table factulink.pago does not contain any data (it is empty)

-- 
-- Dumping data for table unidad
--
INSERT INTO unidad VALUES
(1, 'Unidad', 1, True),
(3, 'Saco de 20Lb', 1, True),
(4, 'Caja de 12 unidades', 1, True);

-- 
-- Dumping data for table producto
--
INSERT INTO producto VALUES
(9, '546', 'Aranque', 1, 1, NULL, 'area', 45, 45, 45, 'asdf as', True, 1, '2021-04-30 22:40:38', True),
(11, '111', 'lale', 1, 1, NULL, 'asdf asdf', 45, 45, 5, 'fasd asdf', True, 1, '2021-05-02 22:05:11', True);

-- 
-- Dumping data for table factura
--
-- Table factulink.factura does not contain any data (it is empty)

-- 
-- Dumping data for table tercero_telefono
--
INSERT INTO tercero_telefono VALUES
(5, 3),
(6, 4);

-- 
-- Dumping data for table tercero_direccion
--
INSERT INTO tercero_direccion VALUES
(5, 3, 'Villa Progreso, La Herradura', True),
(6, 4, 'Villa Progreso, La Herradura', True),
(10, 6, 'asdfla sd', True),
(11, 7, 'asdfla sd', True);

-- 
-- Dumping data for table tercero_correo
--
INSERT INTO tercero_correo VALUES
(5, 3),
(6, 4);

-- 
-- Dumping data for table razon_social
--
-- Table factulink.razon_social does not contain any data (it is empty)

-- 
-- Dumping data for table producto_urlfoto
--
-- Table factulink.producto_urlfoto does not contain any data (it is empty)

-- 
-- Dumping data for table producto_proveedor
--
INSERT INTO producto_proveedor VALUES
(11, 1, True);

-- 
-- Dumping data for table precio_venta
--
INSERT INTO precio_venta VALUES
(9, 1, '2021-04-30 22:40:38', 5, NULL, True),
(11, 1, '2021-05-02 22:05:11', 15, NULL, True);

-- 
-- Dumping data for table precio_compra
--
INSERT INTO precio_compra VALUES
(9, 1, '2021-04-30 22:40:38', 4, NULL, True),
(11, 1, '2021-05-02 22:05:11', 15, NULL, True);

-- 
-- Dumping data for table identificacion
--
-- Table factulink.identificacion does not contain any data (it is empty)

-- 
-- Dumping data for table empresa
--
-- Table factulink.empresa does not contain any data (it is empty)

-- 
-- Dumping data for table detalle_pago
--
-- Table factulink.detalle_pago does not contain any data (it is empty)

-- 
-- Dumping data for table detalle_factura
--
-- Table factulink.detalle_factura does not contain any data (it is empty)

-- 
-- Dumping data for table adquisicion_comprobante
--
-- Table factulink.adquisicion_comprobante does not contain any data (it is empty)

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;